#!/bin/bash

in_list() {
   local search="$1"
   shift
   local list=("$@")
   for elem in "${list[@]}" ; do
      [[ "$elem" == "$search" ]] && return 0
   done
   return 1
}

# Helper function for producing JVM flags based on SCALA_LIBS
function get_jvm_exec_flags() {
   echo "-Xms256m -Xmx2g -XX:-DontCompileHugeMethods -classpath \"$SCALA_LIBS\""
}


BINDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CPP_LIBDIR="$BINDIR/../lib/dbt_c++"
SCALA_LIBDIR="${BINDIR}/../lib/dbt_scala"

if [[ $( uname -s ) == CYGWIN* ]]; then
   PATH_SEP="\\"
   JAVA_SEP=";"
   BINDIR_JAVA="$( cygpath --windows $BINDIR )"
   SCALA_LIBS=`find "$SCALA_LIBDIR" -type f -name '*.jar' | xargs cygpath --windows | tr "\\n" $JAVA_SEP`
else
   PATH_SEP="/"
   JAVA_SEP=":"
   BINDIR_JAVA=$BINDIR
   SCALA_LIBS=`find "$SCALA_LIBDIR" -type f -name '*.jar' | tr "\\n" $JAVA_SEP`
fi

out_src_file="-"
out_src_class_name="-"
out_src_lang="-"
out_bin_file="-"
tmp_out_src_file=""
tmp_out_bin_file=""

option="-"
filter_options="-c -d -D -I -L -r -n"
no_parameter_options="-r"
new_args=""

compile_cmd=""
run_cmd=""
out_bin_args=""

def_flags=""
inc_flags=`echo "$DBT_HDR" | sed 's/:/ -I/g'`
[[ $inc_flags != "" ]] && { inc_flags="-I\"$inc_flags\""; }
inc_flags="-I\"$CPP_LIBDIR\" $inc_flags"
lib_flags=`echo "$DBT_LIB" | sed 's/:/ -L/g'`
[[ $lib_flags != "" ]] && { lib_flags="-L\"$lib_flags\""; }
lib_flags="-L\"$CPP_LIBDIR\" $lib_flags"

# If there is a symlink to a custom C++ compiler, use it instead of g++
if [ -L "./gpp" ]; then
   gpp="./gpp"
else
   gpp="g++"
fi

cpp_compile_flags="-std=c++11"
cpp_opt_flag="-O3"
cpp_libs="-ldbtoaster -lpthread"

lms_codegen_flags="-Xms256m -Xmx2g -XX:-DontCompileHugeMethods  -classpath \"$SCALA_LIBS\""
scala_codegen_flags="-Xms256m -Xmx2g -XX:-DontCompileHugeMethods  -classpath \"$SCALA_LIBS\""
jvm_exec_flags=$scala_codegen_flags
scala_compile_flags="-deprecation -unchecked -feature -classpath \"$SCALA_LIBS\""
scala_opt_flag="-optimise"

compile_log=""
run_log=""
log_gcc=0
log_scala=0
log_dbtoaster=0

run_after_compile=0

for arg in "$@"; do
   if ! in_list $arg $filter_options && ! in_list $option $filter_options; then
      new_args="$new_args $arg";
   fi
   if ! in_list $arg $filter_options && in_list $option $no_parameter_options; then
      new_args="$new_args $arg";
   fi
   if in_list $arg $no_parameter_options; then
      option=$arg
   fi

   if [ $option = "-o" ]; then
      out_src_file=$arg
   elif [ $option = "-l" ]; then
      out_src_lang=$arg;
      if [ $out_src_lang == "scala" ]; then
         scala_codegen_flags="$lms_codegen_flags";
      fi
   elif [ $option = "-c" ]; then
      out_bin_file=$arg
   elif [ $option = "-n" ]; then
      out_src_class_name=$arg
      new_args="$new_args -n $arg";
   elif [ $option = "-r" ]; then
      run_after_compile=1
      if [ $out_bin_file = "-" ]; then
         tmp_out_bin_file=`mktemp -q ./dbttest.XXXXXX`
         [ $? -ne 0 ] && { echo "$0: Can't create temp file, exiting..." ; exit 1; }
         out_bin_file=${tmp_out_bin_file}
      fi
   elif [ $option = "-xbs" ]; then
      out_bin_args="${out_bin_args} -b${arg}"
   elif [ $option = "-D" ]; then
      def_flags="$def_flags -D $arg"
   elif [ $option = "-I" ]; then
      inc_flags="$inc_flags -I\"$arg\""
   elif [ $option = "-L" ]; then
      lib_flags="$lib_flags -L\"$arg\""
   elif [ $option = "-g" ]; then
      cpp_compile_flags="$cpp_compile_flags \"$arg\""
   elif [ $option = "-d" ]; then
      debug_flag=$(echo $arg | tr '[:lower:]' '[:upper:]')
           if [ $debug_flag = "COMPILE-WITH-PROFILE" ]; then
         cpp_compile_flags="$cpp_compile_flags -pg"
      elif [ $debug_flag = "COMPILE-WITH-GDB" ]; then
         cpp_compile_flags="$cpp_compile_flags -g"
      elif [ $debug_flag = "COMPILE-WITHOUT-OPT" ]; then
         cpp_opt_flag=""
         scala_opt_flag=""
      elif [ $debug_flag = "COMPILE-WITH-STATIC" ]; then
         cpp_compile_flags="$cpp_compile_flags -static"
      elif [ $debug_flag = "LOG-DBTOASTER" ]; then
         log_dbtoaster=1
      elif [ $debug_flag = "LOG-GCC" ]; then
         log_gcc=1
      elif [ $debug_flag = "LOG-SCALA" ]; then
         log_scala=1
      else
         new_args="$new_args -d $arg"
      fi
   fi
   option="-"

   if [ ${arg:0:1} = "-" ]; then
      option=$arg
   fi
done

if [ $out_bin_file != "-" ]; then
   src_extension="hpp"
   if [ $out_src_lang != "-" ]; then
      [ $out_src_lang != "cpp" -a $out_src_lang != "vcpp" -a $out_src_lang != "vscala" -a $out_src_lang != "lmsscala" -a $out_src_lang != "scala" ] && \
         { echo "$0: Binaries can be created only for C++ and Scala languages, exiting..." ; exit 1; }
      [ $out_src_lang == "vscala" ] && { src_extension="scala"; }
      [ $out_src_lang == "lmsscala" ] && { src_extension="scala"; }
      [ $out_src_lang == "scala" ] && { src_extension="scala"; }

   elif [ ${out_src_file} != "-" ]; then
      out_src_file_ext=${out_src_file##*.}
      [[ $out_src_file_ext && ($out_src_file_ext == "vscala" || $out_src_file_ext == "lmsscala" || $out_src_file_ext == "scala") ]] && { src_extension="scala"; }
   fi

   if [ ${out_src_file} = "-" ]; then
      tmp_out_src_file=`mktemp -q ./dbtoaster.XXXXXX`
      [ $? -ne 0 ] && { echo "$0: Can't create temp file, exiting..." ; exit 1; }

      out_src_file=${tmp_out_src_file}.${src_extension}
      tmp_out_src_file="${tmp_out_src_file} ${out_src_file}"
   fi

   if [ $src_extension == "hpp" ]; then
      new_args="$new_args -o $out_src_file"
      ! which g++ &>/dev/null && { echo "Unable to compile C++ code: g++ not found!"; exit 1; }
      main_file="\"$CPP_LIBDIR/main.cpp\""

      compile_flags="$cpp_compile_flags $cpp_opt_flag $def_flags $inc_flags $lib_flags $cpp_libs"
      compile_cmd="$gpp $main_file -include $out_src_file -o $out_bin_file $compile_flags"
      run_cmd="PATH=.:\$PATH $out_bin_file $out_bin_args"
      [ $log_gcc -eq 1 ] && { compile_log="$compile_log $compile_cmd"; run_log="$run_log $run_cmd"; }
   fi

   if [ $src_extension == "scala" ]; then
      ! which scalac &>/dev/null && { echo "Unable to compile Scala code: scalac not found!"; exit 1; }
      # jar_file="$SCALA_LIBDIR/dbtlib.jar"
      # eval [ ! -f $jar_file ] && { echo "$0: dbtlib.jar not built, exiting..." ; exit 1; }

      if [[ $( uname -s ) == CYGWIN* ]]; then
         out_src_file="$( cygpath --windows $out_src_file )"
         out_src_file="\"$out_src_file\""
      fi
      new_args="$new_args -o $out_src_file"

      out_bin_file_ext=${out_bin_file##*.}
      out_bin_file_ext=$(echo $out_bin_file_ext | tr '[:upper:]' '[:lower:]')
      [[ (-z $out_bin_file_ext) || ($out_bin_file_ext != "jar") ]] && { out_bin_file="$out_bin_file.jar"; }


      if [ -f $out_bin_file ]; then
         rm $out_bin_file
      fi
      compile_flags="$scala_compile_flags $scala_opt_flag"
      compile_cmd="scalac $out_src_file -d $out_bin_file $compile_flags"

      if [[ $( uname -s ) == CYGWIN* ]]; then
         new_out_bin_file=`cygpath --windows $out_bin_file`
      else
         new_out_bin_file=$out_bin_file
      fi
      SCALA_LIBS="${SCALA_LIBS}${JAVA_SEP}.${PATH_SEP}$new_out_bin_file"
      jvm_exec_flags=$(get_jvm_exec_flags)

      if [[ $out_src_class_name == "-" ]] ; then
         run_cmd=$(echo "$out_src_file" | sed 's/\"//g' | sed -e 's/.*[/\\\\]//; s/\..*//' | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }')
         run_cmd="java $jvm_exec_flags ddbt.gen.$run_cmd $out_bin_args"
      else
         run_cmd="java $jvm_exec_flags $out_src_class_name $out_bin_args"
      fi

      [ $log_scala -eq 1 ] && { compile_log="$compile_log $compile_cmd"; run_log="$run_log $run_cmd"; }
   fi

   mkdir -p $(dirname "$out_bin_file")
fi

dbtoaster_bin="${BINDIR_JAVA}${PATH_SEP}dbtoaster_frontend"
if [ "$(uname)" == "Darwin" ] && [ -e "${BINDIR_JAVA}${PATH_SEP}dbtoaster_frontend_macos" ]; then
    dbtoaster_bin="${BINDIR_JAVA}${PATH_SEP}dbtoaster_frontend_macos"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ] && [ -e "${BINDIR_JAVA}${PATH_SEP}dbtoaster_frontend_linux" ]; then
    dbtoaster_bin="${BINDIR_JAVA}${PATH_SEP}dbtoaster_frontend_linux"
fi

dbtoaster_cmd="java $scala_codegen_flags ddbt.Compiler --frontend \"${dbtoaster_bin}\" $new_args"
[ $log_dbtoaster -eq 1 ] && { echo $dbtoaster_cmd; }
eval $dbtoaster_cmd;

[ "$compile_log" ] && { echo $compile_log; }
eval $compile_cmd;

# Delete any temporary files
[ "$tmp_out_src_file" ] && { rm -fr $tmp_out_src_file; }

[ "$run_log" ] && { echo $run_log; }

if [ $run_after_compile == "1" ]; then
   eval "time $run_cmd"
fi

[ "$tmp_out_bin_file" ] && { tmp_out_bin_file="${tmp_out_bin_file} ${tmp_out_bin_file}.jar"; rm -fr $tmp_out_bin_file; }

exit 0;

